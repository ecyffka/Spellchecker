-- Inspired by http://www.norvig.com/spell-correct.html

module WordSuggester(findSuggestions) where

import WordModel

{-
'findSuggestions w wm' Returns the 5 most probable suggestions
of words to replace the mispelled word m. Uses the WordModel wm
in probability calculations.
-}
findSuggestions :: [Char] -> WordModel -> [[Char]]
findSuggestions w wm = []

{-
'mostProbable wm n candidates' Selects the n most probable words from 
the list of candidate words, according to the WordModel wm
-}
mostProbable :: Num a => WordModel -> a -> [[Char]] -> [[Char]]
mostProbable wm n candidates = []

{-
Generate a list of all possible words within edit distance 2 from the given word w
-}
candidates :: [Char] -> [[Char]]
candidates w = []

{-
Generate a list of all possible words within edit distance 1 from the given word w
Considers insertions, deletions, replacements, and swaps
-}
edits1 :: [Char] -> [[Char]]
edits1 w = []

{-
Generate a list of splits for the word w, where each entry in the list is a tuple
of the string before the split and the string after the split. The right entry of the
split is never empty.
eg. splits "apple" => [("","apple"),("a","pple"),("ap","ple"),("app","le"),("appl","e")]
-}
splits :: [Char] -> [([Char],[Char])]
splits w = []

{-
From the list of splits for the word w, generate a list of possible words that could be generated
from inserting a character into the word w. At every split location, one word will be generated for 
every letter in the alphabet.
-}
inserts :: [([Char],[Char])] -> [[Char]]
inserts splits = []

{-
From the list of splits for the word w, generate a list of possible words that could be generated
by deleting a character from the word w. At every split location, one character will be deleted.
-}
deletes :: [([Char],[Char])] -> [[Char]]
deletes splits = []

{-
From the list of splits for the word w, generate a list of possible words that could be generated
from replacing a character into the word w. At every split location, one word will be generated for 
every letter in the alphabet.
-}
replaces :: [([Char],[Char])] -> [[Char]]
replaces splits = []

{-
From the list of splits for the word w, generate a list of possible words that could be generated
from swapping a character with its neighbour in the word w. At every split location, a word will
be generated by swapping the next two characters
-}
transposes :: [([Char],[Char])] -> [[Char]]
transposes splits = []